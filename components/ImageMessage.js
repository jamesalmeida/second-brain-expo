import React, { useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import { Image as ExpoImage } from 'expo-image';
import Animated, { 
  useAnimatedStyle, 
  withTiming, 
  withSpring,
  interpolate,
  useSharedValue,
  runOnJS
} from 'react-native-reanimated';

const ImageMessage = ({ 
  message, 
  handleLongPress, 
  isFlipped,
  onFlipEnd 
}) => {
  const scale = useSharedValue(1);
  const flipAnimation = useSharedValue(0);
  const srcMatch = message.content.match(/src="([^"]+)"/);
  
  const handlePressIn = () => {
    scale.value = withSpring(0.95);
  };

  const handlePressOut = () => {
    scale.value = withSpring(1);
  };

  const handleFlipBack = () => {
    flipAnimation.value = withTiming(0, { duration: 500 }, (finished) => {
      if (finished) {
        runOnJS(onFlipEnd)();
      }
    });
  };
  
  useEffect(() => {
    if (isFlipped) {
      flipAnimation.value = withTiming(1, { duration: 500 });
    }
  }, [isFlipped]);

  const handlePress = () => {
    if (!isFlipped) {
      flipAnimation.value = withTiming(1, { duration: 500 });
    }
  };

  if (!srcMatch || !srcMatch[1]) return null;

  const frontAnimatedStyle = useAnimatedStyle(() => {
    const rotateY = interpolate(
      flipAnimation.value,
      [0, 1],
      [0, -180]
    );
    return {
      transform: [
        { perspective: 1000 },
        { rotateY: `${rotateY}deg` },
        { scale: scale.value }
      ],
      backfaceVisibility: 'hidden',
    };
  });

  const backAnimatedStyle = useAnimatedStyle(() => {
    const rotateY = interpolate(
      flipAnimation.value,
      [0, 1],
      [-180, -360]
    );
    return {
      transform: [
        { perspective: 1000 },
        { rotateY: `${rotateY}deg` },
        { scale: scale.value }
      ],
      backfaceVisibility: 'hidden',
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
    };
  });

  return (
    <TouchableOpacity
      onPress={handlePress}
      onLongPress={() => handleLongPress(message)}
      onPressIn={() => handlePressIn()}
      onPressOut={() => handlePressOut()}
      delayLongPress={200}
      activeOpacity={1}
    >
      <View style={[
        styles.imageContainer,
        { alignSelf: message.role === 'user' ? 'flex-end' : 'flex-start' }
      ]}>
        <Animated.View style={frontAnimatedStyle}>
          <ExpoImage
            source={{ uri: srcMatch[1] }}
            style={styles.messageImage}
            contentFit="cover"
            transition={200}
          />
          <Text style={styles.imageCaption}>Generated by DALL-E 3</Text>
        </Animated.View>

        <Animated.View style={[styles.backContainer, backAnimatedStyle]}>
          <View style={styles.infoContent}>
            <TouchableOpacity 
              onPress={handleFlipBack}
              style={styles.closeButton}
            >
              <Text style={styles.closeButtonText}>Ã—</Text>
            </TouchableOpacity>
            <Text style={styles.infoTitle}>Image Information</Text>
            <Text style={styles.infoText}>Model: DALL-E 3</Text>
            <Text style={styles.infoText}>Size: 1024x1024</Text>
            <Text style={styles.infoText}>Generated: {new Date().toLocaleDateString()}</Text>
          </View>
        </Animated.View>
      </View>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  imageContainer: {
    width: '75%',
    marginBottom: 10,
  },
  messageImage: {
    width: '100%',
    height: 300,
    borderRadius: 18,
  },
  captionContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 10,
    marginTop: 4,
    marginBottom: 10,
  },
  imageCaption: {
    fontSize: 10,
    color: '#8E8E93',
  },
  moreInfo: {
    fontSize: 10,
    color: '#007AFF',
  },
  backContainer: {
    width: '100%',
    height: 300,
    backgroundColor: '#F2F2F7',
    borderRadius: 18,
  },
  infoContent: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  infoTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#1C1C1E',
  },
  infoText: {
    fontSize: 14,
    color: '#3A3A3C',
    marginBottom: 10,
  },
  flipBackButton: {
    marginTop: 20,
    padding: 10,
    backgroundColor: '#007AFF',
    borderRadius: 8,
  },
  flipBackText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
  },
  closeButton: {
    position: 'absolute',
    top: 10,
    right: 10,
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: '#007AFF',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1,
  },
  closeButtonText: {
    color: '#FFFFFF',
    fontSize: 20,
    fontWeight: 'bold',
  },
});

export default ImageMessage;
